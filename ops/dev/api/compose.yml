volumes:
  psql_volume: {}

x-app: &api_base
  image: api:latest
  build:
    context: ../../../
    dockerfile: ./ops/dev/api/Dockerfile
  volumes:
    - ../../../api/minitwitter/:/api/
  depends_on:
    - psql
    - redis

services:
  api:
    <<: *api_base
    container_name: container-django
    command: >
      bash -c "python manage.py migrate
      && python manage.py runserver 0.0.0.0:${API_PORT}"
    environment:
      - CONN_MAX_AGE=${CONN_MAX_AGE}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_PORT=${DB_PORT}
    ports:
      - "${API_PORT}:${API_PORT}"
    restart: on-failure
    depends_on:
      - celery

  celery:
    <<: *api_base
    container_name: container-celery
    command: celery --app=minitwitter worker --loglevel=info
    environment:
      - CELERY_BROKER_SERVICE=${CELERY_BROKER_SERVICE}
      - CELERY_BROKER_HOST=${CELERY_BROKER_HOST}
      - CELERY_BROKER_PORT=${CELERY_BROKER_PORT}
    restart: on-failure

  psql:
    container_name: container-psql
    image: docker.io/library/postgres:15.3-alpine
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - psql_volume:/var/lib/postgresql/data/
    restart: on-failure

  redis:
    container_name: container-redis
    image: docker.io/library/redis:6.0.5-alpine3.12
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    restart: on-failure
